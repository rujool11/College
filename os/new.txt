sjf and fcfs ---

#include <stdio.h>
#include <stdlib.h>
int processes[] = {1,2,3,4,5};
int burstTimes[] = {10,5,8,8,6};
int const n = sizeof(processes)/sizeof(processes[0]);

void findwaitime(int wait[n]){
    int i;
    wait[0] = 0;
    for (i=1;i<n;i++){
        wait[i] = burstTimes[i-1] + wait[i-1];
    }
}

void findturnaroundtime(int turnaround[n],int wait[n]){
    int i;
    for (i=0;i<n;i++){
        turnaround[i] = burstTimes[i] + wait[i];
    }
}

void fcfs(){
    int wait[n],turnaround[n];
    int totalwait = 0,totalturnaround = 0;
    int i;
    
    findwaitime(wait);
    findturnaroundtime(turnaround,wait);
    
    printf("Processes  BurstTime  WaitTime  TurnAroundTime\n");
    for (i=0;i<n;i++){
        totalwait += wait[i];
        totalturnaround  += turnaround[i];
        printf("  %d",(i+1));
        printf("            %d",burstTimes[i]);
        printf("            %d",wait[i]);
        printf("            %d\n",turnaround[i]);
    }
    
    float s = (float)totalwait/(float)n;
    float t = (float)totalturnaround/(float)n;
    
    printf("Avg waiting time : %f\n",s);
    printf("Avg turn around time : %f\n",t);
    
}

void swap(int* a,int* b){
    int temp = *a;
    *a = *b;
    *b = temp;
}

void sjf(){
    int wait[n],tat[n];
    int i,j,index,total,totalwait,totalturnaround,temp;
    float avgwt,avgtat;
    for (i=0;i<n;i++){
        index = i;
        for (j=i+1;j<n;j++){
            if (burstTimes[j]<burstTimes[index]){
                index = j;
                temp = burstTimes[i];
                burstTimes[i] = burstTimes[index];
                burstTimes[index] = temp;
                temp = processes[i];
                processes[i] = processes[index];
                processes[index] = temp;
            }
        }
    }
    for (i=1;i<n;i++){
        wait[0] = 0;
        wait[i] = 0;
        for (j=0;j<i;j++){wait[i] += burstTimes[j];
            total += wait[i];
        }
        
    }
    total = 0;
    avgwt = (float)total/(float)n;
    for (i=0;i<n;i++){
    tat[i] = burstTimes[i] + wait[i];
    total+=tat[i];
    }
    printf("Processes  BurstTime  WaitTime  TurnAroundTime\n");
    for (i=0;i<n;i++){
        totalwait += wait[i];
        totalturnaround  += tat[i];
        printf("  %d",(i+1));
        printf("            %d",burstTimes[i]);
        printf("            %d",wait[i]);
        printf("        %d\n",tat[i]);
    }
    
        
    float s = (float)totalwait/(float)n;
    float t = (float)totalturnaround/(float)n;
    
    printf("Avg waiting time : %f\n",s);
    printf("Avg turn around time : %f\n\n",t);
    
}

int main(){
    printf("21BCT0263 Rujool Patil\n");
    printf("both outputs are for randomly chosen sample burst times and processes\n");
    printf("fcfs output: \n");
    fcfs();
    printf("sjf output : \n");
    sjf();
}
----------------------------------------------------------------------------------------------------------------------------------------------------------

round robin and priority 

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define n 3
int processes[n] = {1,2,3};
int burstTimes[n] = {10,5,8};
int priorityValues[n] = {2,0,1};

void swap(int* a,int* b){
    int temp = *a;
    *a = *b;
    *b = temp;
}

void priority(){
    int i,j,a,m,t;
    int sum;
    int b[n] = {10,5,8};
    int index[n] = {1,2,3};
    int p[n] = {2,0,1};
    
    for (i=0;i<n;i++){
        a = p[i],m=i;
        for (j=i;j<n;j++){
            if (p[j]>a){
                a = p[j];
                m=j;
            }
        }
        
        swap(&p[i],&p[m]);
        swap(&b[i],&b[m]);
        swap(&index[i],&index[m]);
    }
    
    t=0;
    printf("Order of execution: \n");
    for (i=0;i<n;i++){
        printf("process %d is executed from %d to %d\n",index[i],t,t+b[i]);
        t+=b[i];
    }
    printf("\nprocess id    burstTime   wait time   turnaround time\n");
    int waittime=0;
    sum = waittime;
    for (i=0;i<n;i++){
        printf("P%d               %d          %d            %d\n",index[i],b[i],waittime,waittime+b[i]);
        sum = sum + waittime;
        waittime+=b[i];
    }
    float avgwaittime = sum*1.0/n;
    printf("avg wait time is %f\n",avgwaittime);
}

int roundrobin(){
    int total = 0,counter = 0,i;
    int x = n;
    int tempburstTimes[n] = {10,8,7};
    int bt[n] = {10,8,7};
    int at[n] = {0,1,2};
    int waittime=0,tat=0;
    int timeslot = 5;
    
    printf("process id      burst time      turnaround time   wait time\n  ");
    for (total,i=0;x!=0;){
        if (tempburstTimes[i]<=timeslot && tempburstTimes[i]>0){
            total += tempburstTimes[i];
            tempburstTimes[i] = 0;
            counter = 1;
        }
        else if (tempburstTimes[i]>0){
            tempburstTimes[i] = tempburstTimes[i] - timeslot;
            total += timeslot;
        }
        if (tempburstTimes[i]==0 && counter==1){
            x--;
            printf("process no %d\t\t%d\t %d\t\t\t%d\n",i+1,bt[i],total-at[i],total-at[i]-bt[i]);
            waittime = waittime + total - at[i] - bt[i];
            tat += total - at[i];
            counter = 0;
        }
        if (i==n-1){
            i=0;
        }
        else if (at[i+1]<=total){
            i++;
        }
        else{
            i=0;
        }
    }
    float avgwaittime = waittime*1.0/n;
    printf("avg waiting time = %f\n",avgwaittime);
}

int main(){
    printf("Rujool Patil 21BCT0263 Lab 2\n");
    printf("\nPRIORITY\n");
    priority();
    printf("\nROUND ROBIN\n");
    roundrobin();
    return 0;}
---------------------------------------------------------------------------------------------------------------------------------------------------------

BANKER'S algo :

#include <stdio.h>
#include <stdbool.h>
#define P 4
#define R 3

int allocated[P][R] = {{0, 1, 0},
                       {2, 0, 0},
                       {3, 0, 2},
                       {2, 1, 1}};

int max[P][R] = {{7, 5, 3},
                 {3, 2, 2},
                 {9, 0, 2},
                 {2, 2, 2}};

int resources[R] = { 10, 5, 7 };


int available[R];

bool flagged[P];

int safeSeq[P];
int count = -1;

int min(bool* avl){
    for (int i=0;i<P;i++){
        if (avl[i] == true){
            return i;
        }
    }
    return -1;
}

int sum(int allocated[P][R],int x){
    int sum = 0;
    for (int i=0;i<P;i++){
        sum += allocated[i][x];
    }
    return sum;
}

bool allflagged(){
    for (int i=0;i<P;i++){
        if (flagged[i] == false){return false;}
    }
    return true;
}

bool isSafe(int pid){
    for (int i=0;i<R;i++){
        if (max[pid][i]>available[i]){return false;}
    }
    return true;
}

void execute(int pid){
    flagged[pid] = true;
    for (int i=0;i<R;i++){
        available[i] += max[pid][i];
    }
    return;
}

bool avl[P];

void checkAvail(){
    for (int i=0;i<P;i++){
        avl[i] = false;
    }
    for (int i=0;i<P;i++){
        if (!flagged[i] && isSafe(i)){
            avl[i] = true;
        }
    }
}

void bankers(){
    
    for (int i=0;i<P;i++){
        flagged[i] = false;
    }

    for (int i=0;i<R;i++){
        available[i] = resources[i] - sum(allocated,i);
    }

    int pid = 0;

    while (!allflagged()){
        // if (isSafe(pid) && !flagged[pid]){
        //     execute(pid);
        //     safeSeq[++count] = pid+1;
        // }
        // if (pid<P){pid++;}
        // else{
        //     pid = 0;
        // }
        checkAvail();
        for (int i=0;i<P;i++){
            printf("%d ",avl[i]);
        }
        printf("\n");
        if (min(avl) == -1){
            break;
        }
        execute(min(avl));
        safeSeq[++count] = min(avl)+1;
    }
    if (count==P-1){printf("safe sequence found\n");}
    else{
        printf("no safe sequence\n");
    }
    for (int i=0;i<P;i++){
        printf("P%d ",safeSeq[i]);
    }
    printf("\n");

}

int main(){
    bankers();
    return 0;
}

--------------------------------------------------------------------------------------------------------------------------------------------
FIFO PAGE REPLACEMENT


// C++ implementation of FIFO page replacement
// in Operating Systems.
#include<bits/stdc++.h>
using namespace std;
 
// Function to find page faults using FIFO
int pageFaults(int pages[], int n, int capacity)
{
    // To represent set of current pages. We use
    // an unordered_set so that we quickly check
    // if a page is present in set or not
    unordered_set<int> s;
 
    // To store the pages in FIFO manner
    queue<int> indexes;
 
    // Start from initial page
    int page_faults = 0;
    for (int i=0; i<n; i++)
    {
        // Check if the set can hold more pages
        if (s.size() < capacity)
        {
            // Insert it into set if not present
            // already which represents page fault
            if (s.find(pages[i])==s.end())
            {
                // Insert the current page into the set
                s.insert(pages[i]);
 
                // increment page fault
                page_faults++;
 
                // Push the current page into the queue
                indexes.push(pages[i]);
            }
        }
 
        // If the set is full then need to perform FIFO
        // i.e. remove the first page of the queue from
        // set and queue both and insert the current page
        else
        {
            // Check if current page is not already
            // present in the set
            if (s.find(pages[i]) == s.end())
            {
                // Store the first page in the
                // queue to be used to find and
                // erase the page from the set
                int val = indexes.front();
                 
                // Pop the first page from the queue
                indexes.pop();
 
                // Remove the indexes page from the set
                s.erase(val);
 
                // insert the current page in the set
                s.insert(pages[i]);
 
                // push the current page into
                // the queue
                indexes.push(pages[i]);
 
                // Increment page faults
                page_faults++;
            }
        }
    }
 
    return page_faults;
}
 
// Driver code
int main()
{
    int pages[] = {7, 0, 1, 2, 0, 3, 0, 4,
                   2, 3, 0, 3, 2};
    int n = sizeof(pages)/sizeof(pages[0]);
    int capacity = 4;
    cout << pageFaults(pages, n, capacity);
    return 0;
}

---------------------------------------------------------------------------------------------------------------------------

OPRIMAL PAGE REPLACEMENT

// CPP program to demonstrate optimal page
// replacement algorithm.
#include <bits/stdc++.h>
using namespace std;
 
// Function to check whether a page exists
// in a frame or not
bool search(int key, vector<int>& fr)
{
    for (int i = 0; i < fr.size(); i++)
        if (fr[i] == key)
            return true;
    return false;
}
 
// Function to find the frame that will not be used
// recently in future after given index in pg[0..pn-1]
int predict(int pg[], vector<int>& fr, int pn, int index)
{
    // Store the index of pages which are going
    // to be used recently in future
    int res = -1, farthest = index;
    for (int i = 0; i < fr.size(); i++) {
        int j;
        for (j = index; j < pn; j++) {
            if (fr[i] == pg[j]) {
                if (j > farthest) {
                    farthest = j;
                    res = i;
                }
                break;
            }
        }
 
        // If a page is never referenced in future,
        // return it.
        if (j == pn)
            return i;
    }
 
    // If all of the frames were not in future,
    // return any of them, we return 0. Otherwise
    // we return res.
    return (res == -1) ? 0 : res;
}
 
void optimalPage(int pg[], int pn, int fn)
{
    // Create an array for given number of
    // frames and initialize it as empty.
    vector<int> fr;
 
    // Traverse through page reference array
    // and check for miss and hit.
    int hit = 0;
    for (int i = 0; i < pn; i++) {
 
        // Page found in a frame : HIT
        if (search(pg[i], fr)) {
            hit++;
            continue;
        }
 
        // Page not found in a frame : MISS
 
        // If there is space available in frames.
        if (fr.size() < fn)
            fr.push_back(pg[i]);
 
        // Find the page to be replaced.
        else {
            int j = predict(pg, fr, pn, i + 1);
            fr[j] = pg[i];
        }
    }
    cout << "No. of hits = " << hit << endl;
    cout << "No. of misses = " << pn - hit << endl;
}
 
// Driver Function
int main()
{
    int pg[] = { 7, 0, 1, 2, 0, 3, 0, 4, 2, 3, 0, 3, 2 };
    int pn = sizeof(pg) / sizeof(pg[0]);
    int fn = 4;
    optimalPage(pg, pn, fn);
    return 0;
}
 
// This code is contributed by Karandeep Singh


--------------------------------------------------------------------------------------------------------------------------------------------

LRU PAGE REPLACEMENT

#include<bits/stdc++.h>
using namespace std;
 
// Function to find page faults using indexes
int pageFaults(int pages[], int n, int capacity)
{
    // To represent set of current pages. We use
    // an unordered_set so that we quickly check
    // if a page is present in set or not
    unordered_set<int> s;
 
    // To store least recently used indexes
    // of pages.
    unordered_map<int, int> indexes;
 
    // Start from initial page
    int page_faults = 0;
    for (int i=0; i<n; i++)
    {
        // Check if the set can hold more pages
        if (s.size() < capacity)
        {
            // Insert it into set if not present
            // already which represents page fault
            if (s.find(pages[i])==s.end())
            {
                s.insert(pages[i]);
 
                // increment page fault
                page_faults++;
            }
 
            // Store the recently used index of
            // each page
            indexes[pages[i]] = i;
        }
 
        // If the set is full then need to perform lru
        // i.e. remove the least recently used page
        // and insert the current page
        else
        {
            // Check if current page is not already
            // present in the set
            if (s.find(pages[i]) == s.end())
            {
                // Find the least recently used pages
                // that is present in the set
                int lru = INT_MAX, val;
                for (auto it=s.begin(); it!=s.end(); it++)
                {
                    if (indexes[*it] < lru)
                    {
                        lru = indexes[*it];
                        val = *it;
                    }
                }
 
                // Remove the indexes page
                s.erase(val);
 
                // insert the current page
                s.insert(pages[i]);
 
                // Increment page faults
                page_faults++;
            }
 
            // Update the current page index
            indexes[pages[i]] = i;
        }
    }
 
    return page_faults;
}
 
// Driver code
int main()
{
    int pages[] = {7, 0, 1, 2, 0, 3, 0, 4, 2, 3, 0, 3, 2};
    int n = sizeof(pages)/sizeof(pages[0]);
    int capacity = 4;
    cout << pageFaults(pages, n, capacity);
    return 0;
}

----------------------------------------------------------------------------------------------------------
Worst fit ---


// C++ implementation of worst - Fit algorithm
#include<bits/stdc++.h>
using namespace std;
 
// Function to allocate memory to blocks as per worst fit
// algorithm
void worstFit(int blockSize[], int m, int processSize[],
                                                 int n)
{
    // Stores block id of the block allocated to a
    // process
    int allocation[n];
 
    // Initially no block is assigned to any process
    memset(allocation, -1, sizeof(allocation));
 
    // pick each process and find suitable blocks
    // according to its size ad assign to it
    for (int i=0; i<n; i++)
    {
        // Find the best fit block for current process
        int wstIdx = -1;
        for (int j=0; j<m; j++)
        {
            if (blockSize[j] >= processSize[i])
            {
                if (wstIdx == -1)
                    wstIdx = j;
                else if (blockSize[wstIdx] < blockSize[j])
                    wstIdx = j;
            }
        }
 
        // If we could find a block for current process
        if (wstIdx != -1)
        {
            // allocate block j to p[i] process
            allocation[i] = wstIdx;
 
            // Reduce available memory in this block.
            blockSize[wstIdx] -= processSize[i];
        }
    }
 
    cout << "\nProcess No.\tProcess Size\tBlock no.\n";
    for (int i = 0; i < n; i++)
    {
        cout << "   " << i+1 << "\t\t" << processSize[i] << "\t\t";
        if (allocation[i] != -1)
            cout << allocation[i] + 1;
        else
            cout << "Not Allocated";
        cout << endl;
    }
}
 
// Driver code
int main()
{
    int blockSize[] = {100, 500, 200, 300, 600};
    int processSize[] = {212, 417, 112, 426};
    int m = sizeof(blockSize)/sizeof(blockSize[0]);
    int n = sizeof(processSize)/sizeof(processSize[0]);
 
    worstFit(blockSize, m, processSize, n);
 
    return 0 ;
}

----------------------------------------------------------------------------------------------------------------------------------------------------------

best fit ----

// C++ implementation of Best - Fit algorithm
#include<iostream>
using namespace std;
 
// Method to allocate memory to blocks as per Best fit algorithm
void bestFit(int blockSize[], int m, int processSize[], int n)
{
    // Stores block id of the block allocated to a process
    int allocation[n];
 
    // Initially no block is assigned to any process
    for (int i = 0; i < n; i++)
        allocation[i] = -1;
 
    // pick each process and find suitable blocks
    // according to its size ad assign to it
    for (int i = 0; i < n; i++)
    {
        // Find the best fit block for current process
        int bestIdx = -1;
        for (int j = 0; j < m; j++)
        {
            if (blockSize[j] >= processSize[i])
            {
                if (bestIdx == -1)
                    bestIdx = j;
                else if (blockSize[bestIdx] > blockSize[j])
                    bestIdx = j;
            }
        }
 
        // If we could find a block for current process
        if (bestIdx != -1)
        {
            // allocate block j to p[i] process
            allocation[i] = bestIdx;
 
            // Reduce available memory in this block.
            blockSize[bestIdx] -= processSize[i];
        }
    }
 
    cout << "\nProcess No.\tProcess Size\tBlock no.\n";
    for (int i = 0; i < n; i++)
    {
        cout << " " << i+1 << "\t\t" << processSize[i] << "\t\t";
        if (allocation[i] != -1)
            cout << allocation[i] + 1;
        else
            cout << "Not Allocated";
        cout << endl;
    }
}
 
// Driver Method
int main()
{
    int blockSize[] = {100, 500, 200, 300, 600};
    int processSize[] = {212, 417, 112, 426};
    int m = sizeof(blockSize) / sizeof(blockSize[0]);
    int n = sizeof(processSize) / sizeof(processSize[0]);
 
    bestFit(blockSize, m, processSize, n);
 
    return 0 ;
}

----------------------------------------------------------------------------------------------------------------------------------------------------------
