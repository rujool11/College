BANKER'S algo :

#include <stdio.h>
#include <stdbool.h>
#define P 4
#define R 3

int allocated[P][R] = {{0, 1, 0},
                       {2, 0, 0},
                       {3, 0, 2},
                       {2, 1, 1}};

int max[P][R] = {{7, 5, 3},
                 {3, 2, 2},
                 {9, 0, 2},
                 {2, 2, 2}};

int resources[R] = { 10, 5, 7 };


int available[R];

bool flagged[P];

int safeSeq[P];
int count = -1;

int min(bool* avl){
    for (int i=0;i<P;i++){
        if (avl[i] == true){
            return i;
        }
    }
    return -1;
}

int sum(int allocated[P][R],int x){
    int sum = 0;
    for (int i=0;i<P;i++){
        sum += allocated[i][x];
    }
    return sum;
}

bool allflagged(){
    for (int i=0;i<P;i++){
        if (flagged[i] == false){return false;}
    }
    return true;
}

bool isSafe(int pid){
    for (int i=0;i<R;i++){
        if (max[pid][i]>available[i]){return false;}
    }
    return true;
}

void execute(int pid){
    flagged[pid] = true;
    for (int i=0;i<R;i++){
        available[i] += max[pid][i];
    }
    return;
}

bool avl[P];

void checkAvail(){
    for (int i=0;i<P;i++){
        avl[i] = false;
    }
    for (int i=0;i<P;i++){
        if (!flagged[i] && isSafe(i)){
            avl[i] = true;
        }
    }
}

void bankers(){
    
    for (int i=0;i<P;i++){
        flagged[i] = false;
    }

    for (int i=0;i<R;i++){
        available[i] = resources[i] - sum(allocated,i);
    }

    int pid = 0;

    while (!allflagged()){
        // if (isSafe(pid) && !flagged[pid]){
        //     execute(pid);
        //     safeSeq[++count] = pid+1;
        // }
        // if (pid<P){pid++;}
        // else{
        //     pid = 0;
        // }
        checkAvail();
        for (int i=0;i<P;i++){
            printf("%d ",avl[i]);
        }
        printf("\n");
        if (min(avl) == -1){
            break;
        }
        execute(min(avl));
        safeSeq[++count] = min(avl)+1;
    }
    if (count==P-1){printf("safe sequence found\n");}
    else{
        printf("no safe sequence\n");
    }
    for (int i=0;i<P;i++){
        printf("P%d ",safeSeq[i]);
    }
    printf("\n");

}

int main(){
    bankers();
    return 0;
}

--------------------------------------------------------------------------------------------------------------------------------------------
FIFO PAGE REPLACEMENT


// C++ implementation of FIFO page replacement
// in Operating Systems.
#include<bits/stdc++.h>
using namespace std;
 
// Function to find page faults using FIFO
int pageFaults(int pages[], int n, int capacity)
{
    // To represent set of current pages. We use
    // an unordered_set so that we quickly check
    // if a page is present in set or not
    unordered_set<int> s;
 
    // To store the pages in FIFO manner
    queue<int> indexes;
 
    // Start from initial page
    int page_faults = 0;
    for (int i=0; i<n; i++)
    {
        // Check if the set can hold more pages
        if (s.size() < capacity)
        {
            // Insert it into set if not present
            // already which represents page fault
            if (s.find(pages[i])==s.end())
            {
                // Insert the current page into the set
                s.insert(pages[i]);
 
                // increment page fault
                page_faults++;
 
                // Push the current page into the queue
                indexes.push(pages[i]);
            }
        }
 
        // If the set is full then need to perform FIFO
        // i.e. remove the first page of the queue from
        // set and queue both and insert the current page
        else
        {
            // Check if current page is not already
            // present in the set
            if (s.find(pages[i]) == s.end())
            {
                // Store the first page in the
                // queue to be used to find and
                // erase the page from the set
                int val = indexes.front();
                 
                // Pop the first page from the queue
                indexes.pop();
 
                // Remove the indexes page from the set
                s.erase(val);
 
                // insert the current page in the set
                s.insert(pages[i]);
 
                // push the current page into
                // the queue
                indexes.push(pages[i]);
 
                // Increment page faults
                page_faults++;
            }
        }
    }
 
    return page_faults;
}
 
// Driver code
int main()
{
    int pages[] = {7, 0, 1, 2, 0, 3, 0, 4,
                   2, 3, 0, 3, 2};
    int n = sizeof(pages)/sizeof(pages[0]);
    int capacity = 4;
    cout << pageFaults(pages, n, capacity);
    return 0;
}

---------------------------------------------------------------------------------------------------------------------------

OPRIMAL PAGE REPLACEMENT

// CPP program to demonstrate optimal page
// replacement algorithm.
#include <bits/stdc++.h>
using namespace std;
 
// Function to check whether a page exists
// in a frame or not
bool search(int key, vector<int>& fr)
{
    for (int i = 0; i < fr.size(); i++)
        if (fr[i] == key)
            return true;
    return false;
}
 
// Function to find the frame that will not be used
// recently in future after given index in pg[0..pn-1]
int predict(int pg[], vector<int>& fr, int pn, int index)
{
    // Store the index of pages which are going
    // to be used recently in future
    int res = -1, farthest = index;
    for (int i = 0; i < fr.size(); i++) {
        int j;
        for (j = index; j < pn; j++) {
            if (fr[i] == pg[j]) {
                if (j > farthest) {
                    farthest = j;
                    res = i;
                }
                break;
            }
        }
 
        // If a page is never referenced in future,
        // return it.
        if (j == pn)
            return i;
    }
 
    // If all of the frames were not in future,
    // return any of them, we return 0. Otherwise
    // we return res.
    return (res == -1) ? 0 : res;
}
 
void optimalPage(int pg[], int pn, int fn)
{
    // Create an array for given number of
    // frames and initialize it as empty.
    vector<int> fr;
 
    // Traverse through page reference array
    // and check for miss and hit.
    int hit = 0;
    for (int i = 0; i < pn; i++) {
 
        // Page found in a frame : HIT
        if (search(pg[i], fr)) {
            hit++;
            continue;
        }
 
        // Page not found in a frame : MISS
 
        // If there is space available in frames.
        if (fr.size() < fn)
            fr.push_back(pg[i]);
 
        // Find the page to be replaced.
        else {
            int j = predict(pg, fr, pn, i + 1);
            fr[j] = pg[i];
        }
    }
    cout << "No. of hits = " << hit << endl;
    cout << "No. of misses = " << pn - hit << endl;
}
 
// Driver Function
int main()
{
    int pg[] = { 7, 0, 1, 2, 0, 3, 0, 4, 2, 3, 0, 3, 2 };
    int pn = sizeof(pg) / sizeof(pg[0]);
    int fn = 4;
    optimalPage(pg, pn, fn);
    return 0;
}
 
// This code is contributed by Karandeep Singh


--------------------------------------------------------------------------------------------------------------------------------------------

LRU PAGE REPLACEMENT

#include<bits/stdc++.h>
using namespace std;
 
// Function to find page faults using indexes
int pageFaults(int pages[], int n, int capacity)
{
    // To represent set of current pages. We use
    // an unordered_set so that we quickly check
    // if a page is present in set or not
    unordered_set<int> s;
 
    // To store least recently used indexes
    // of pages.
    unordered_map<int, int> indexes;
 
    // Start from initial page
    int page_faults = 0;
    for (int i=0; i<n; i++)
    {
        // Check if the set can hold more pages
        if (s.size() < capacity)
        {
            // Insert it into set if not present
            // already which represents page fault
            if (s.find(pages[i])==s.end())
            {
                s.insert(pages[i]);
 
                // increment page fault
                page_faults++;
            }
 
            // Store the recently used index of
            // each page
            indexes[pages[i]] = i;
        }
 
        // If the set is full then need to perform lru
        // i.e. remove the least recently used page
        // and insert the current page
        else
        {
            // Check if current page is not already
            // present in the set
            if (s.find(pages[i]) == s.end())
            {
                // Find the least recently used pages
                // that is present in the set
                int lru = INT_MAX, val;
                for (auto it=s.begin(); it!=s.end(); it++)
                {
                    if (indexes[*it] < lru)
                    {
                        lru = indexes[*it];
                        val = *it;
                    }
                }
 
                // Remove the indexes page
                s.erase(val);
 
                // insert the current page
                s.insert(pages[i]);
 
                // Increment page faults
                page_faults++;
            }
 
            // Update the current page index
            indexes[pages[i]] = i;
        }
    }
 
    return page_faults;
}
 
// Driver code
int main()
{
    int pages[] = {7, 0, 1, 2, 0, 3, 0, 4, 2, 3, 0, 3, 2};
    int n = sizeof(pages)/sizeof(pages[0]);
    int capacity = 4;
    cout << pageFaults(pages, n, capacity);
    return 0;
}

--------------------------------------------------------------------------------------------------------------------------


